/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  DebugTransactionGuard,
  DebugTransactionGuardInterface,
} from "../DebugTransactionGuard";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "safe",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "GasUsage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "safe",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "enum Enum.Operation",
        name: "operation",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "safeTxGas",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "usesRefund",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "signatures",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "executor",
        type: "address",
      },
    ],
    name: "TransactionDetails",
    type: "event",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    name: "checkAfterExecution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "enum Enum.Operation",
        name: "operation",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "safeTxGas",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseGas",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "gasToken",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "refundReceiver",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signatures",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "executor",
        type: "address",
      },
    ],
    name: "checkTransaction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "txNonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761077b908161001c8239f35b600080fdfe6080806040526004908136101561001f575b50503461001a57005b600080fd5b60003560e01c90816301ffc9a7146104fa5750806375f0bb521461019257806393271368146100a05763ddbdba63146100585780610011565b3461001a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001a573560005260006020526020604060002054604051908152f35b503461001a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001a57803560243580151580910361001a578160005260006020526040600020549283156101345750816000526000602052600060408120556040519081527f0dcc0fb56a30b6fe6b188f45b47369bc7f3c928a9748e245a79fc3f54ddd056860203392a4005b6064906020604051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601360248201527f436f756c64206e6f7420676574206e6f6e6365000000000000000000000000006044820152fd5b503461001a576101607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001a5780359073ffffffffffffffffffffffffffffffffffffffff90818316830361001a5767ffffffffffffffff60443581811161001a576102059036908401610625565b926002606435101561001a5760e43581811680910361001a576101049081359383851680950361001a576101243590811161001a576102479036908701610625565b9061014496873595858716870361001a57604051987faffed0e0000000000000000000000000000000000000000000000000000000008a5260208a8a81335afa998a1561048c5760009a6104c6575b5060018a10610498578a6020926102f089936040519c8d9586957fd8d11f7800000000000000000000000000000000000000000000000000000000875216908501526024356024850152610140604485015283018661069a565b9061030060648401606435610709565b6084359889608485015260a43560a485015260c435978860c486015260e48501528301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8c016101248301520381335afa96871561048c57600097610428575b507fa65fef32cd19a6639a4bf7a6d196f132c151e4f0bbd2706f7f831b3a778e1ac0937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff999386936103d3610404948b9a996040519816885260243560208901526101208060408a015288019061069a565b926103e360608801606435610709565b6080870152151560a08601528a8a0160c086015284820360e086015261069a565b93166101008201528033930390a36000526000602052016040600020556000604051f35b9095949193989296506020813d602011610484575b8161044a602093836105b5565b8101031261001a575191979195939490939192907fa65fef32cd19a6639a4bf7a6d196f132c151e4f0bbd2706f7f831b3a778e1ac0610361565b3d915061043d565b6040513d6000823e3d90fd5b6011897f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b9099506020813d6020116104f2575b816104e2602093836105b5565b8101031261001a57519838610296565b3d91506104d5565b823461001a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261001a5735907fffffffff00000000000000000000000000000000000000000000000000000000821680920361001a57817fe6d7a83a000000000000000000000000000000000000000000000000000000006020931490811561058b575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483610584565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176105f657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b81601f8201121561001a5780359067ffffffffffffffff82116105f6576040519261067860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601856105b5565b8284526020838301011161001a57816000926020809301838601378301015290565b91908251928382526000905b8482106106f15750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093116106e4575b0116010190565b60008582860101526106dd565b906020908180828501015190828601015201906106a6565b9060028210156107165752565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220abeb39d85e2343326f371c46500eef5fa1df161374a5aa802dfa3eba096cd40064736f6c634300080f0033";

type DebugTransactionGuardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DebugTransactionGuardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DebugTransactionGuard__factory extends ContractFactory {
  constructor(...args: DebugTransactionGuardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DebugTransactionGuard> {
    return super.deploy(overrides || {}) as Promise<DebugTransactionGuard>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DebugTransactionGuard {
    return super.attach(address) as DebugTransactionGuard;
  }
  override connect(signer: Signer): DebugTransactionGuard__factory {
    return super.connect(signer) as DebugTransactionGuard__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DebugTransactionGuardInterface {
    return new utils.Interface(_abi) as DebugTransactionGuardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DebugTransactionGuard {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DebugTransactionGuard;
  }
}
